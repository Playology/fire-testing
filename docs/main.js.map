{"version":3,"sources":["./src/app/contributing/contributing.component.ts","./src/app/contributing/contributing.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/material/material.module.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ftdemo-contributing',\n  templateUrl: './contributing.component.html',\n  styleUrls: ['./contributing.component.scss']\n})\nexport class ContributingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1>Contributing Guide</h1>\n\n<p>\n  If you are interested in contributing to this project and making testing of\n  @angular/fire simple then you are in the right place. Contributors are welcome\n  but you must be prepared to stick rigidly to the practices, procedures and\n  coding standards laid out in this document.\n</p>\n<h2>Test Driven</h2>\n<p>\n  This project must remain 100% test driven. That means no line of\n  implementation code can exist without a test that justifies the existence. It\n  means you absolutely must be able to express a requirement as a test and be\n  able to automate that test, and do so first. Writing tests after the fact is\n  not acceptable. You might ask yourself \"How will anyone know if whether I\n  wrote the test before or after\". Let me assure you a consistent TDD practioner\n  can tell.\n</p>\n<p>\n  Why so strict? I have been practicing TDD for a long time and I learned from\n  the people who invented it. I strongly believe that it is the only way to\n  write good quality code that implements the requirements and nothing but the\n  requirements. I also strongly believe that the tests are the best developer\n  documentation, we can write extra documentation for users or to help people\n  learn what our code does, but as a developer there is no better documentation\n  than tests that not only prove the code meets requirements but also show how\n  it is intended to be used and work.\n</p>\n<p>So before you decide to contribute to this project ask yourself.</p>\n<p></p>\n<ul>\n  <li>>Are you prepared to practice TDD religiously</li>\n  <li>\n    Can you handle having pull requests delayed or rejected because we don't\n    believe you practiced TDD\n  </li>\n  <li>\n    Are you prepared to use an editor or IDE that is capable of continuously\n    linting, building and testing your code\n  </li>\n  <li>\n    Are you prepared to code to conventions and standards you might not agree\n    with or that do not fit with your preferences\n  </li>\n</ul>\n<h2>Choices</h2>\n<p>\n  If you decide you would like to contribute to the project you can do so in one\n  of two ways. You can contribute occasional enhancements or fixes by forking\n  the project and submitting a Pull Request to have changes within your fork\n  merged back to this repo. If you want to become more involved in the project\n  then you can become a maintainer by contacting Mike Hanson through GitHub. As\n  a maintainer you would be given direct access to the repo and able to push\n  changes through a clone of the project.\n</p>\n\n<h2>Work Flow</h2>\n<p>\n  All ehancements or changes to the project will be implemented through a\n  GitFlow based process. Without exception no changes will be made or accepted\n  by any means other than a Pull Request to merge changes into the default\n  <em>develop</em> branch. Release branches will be prepared, tested, tweaked\n  and merged into the *main* branch, which will result in an automated pipeline\n  that will publish a new version of the library to NPM and a new version of the\n  demo app to Firebase.\n</p>\n<p>\n  All commits and pull requests must be linked to an issue id from the\n  Development Project Board. All Pull Requests must be for a single issue, any\n  PR that attempts to implement multiple features or bug fixes will be rejected\n  outright.\n</p>\n\n<h2>Branching</h2>\n<p>\n  As mentioned we will operte a Gitflow based process. When creating a new\n  branch you must use the following naming convention:\n  <br />\n  <em>prefix/friendly_name_id</em>\n  <br />\n  Where <em>prefix</em> is one of\n</p>\n\n<ul>\n  <li>feature - Used only for new features and enchancements</li>\n  <li>\n    bug - Used only when fixing a triaged bug raised against a released feature\n  </li>\n  <li>\n    fix - Used only when fixing an issue in a release branch that has not been\n    released\n  </li>\n</ul>\n\n<p>\n  And <em>id</em> is the issue id the branch aims to deliver or resolve.\n  <br />\n  Any PR that does not match this convention will be rejected and require you to\n  create a properly named branch and a new PR from that branch.\n  <br />\n  Branches for features and bugs must be created from the\n  <em>develop</em> branch and PRs will only be considered if they merge back to\n  the same <em>develop</em> branch.\n  <br />\n  Fix branches should be created from the appropriate pending release branch\n  (there will only ever be one) and will only be considered if they merge back\n  to the same release branch.\n</p>\n\n<h2>Coding Style</h2>\n<p>\n  The rules for coding conventions are fully captured and controlled via\n  TypeScript and TS Lint (We will move to ES Lint when the Angular team do). We\n  strongly urge you to use a code editor that automatically lints your code as\n  you type. VS Code is the recommended editor, but whatever you use you must\n  ensure your code is linted and all issues fixed before pushing a branch and\n  creating a PR. Do not rely on CI builds to do your linting, anyone who\n  consistently triggers failed builds due to linting errors will be barred from\n  contributing to the project.\n</p>\n\n<h2>Tests</h2>\n<p>\n  We expect test coverage to be complete. ALWAYS write a test before anything\n  else and make sure all tests pass before pushing a branch and creating a PR.\n  Any PR that does not sufficiently test even the simplest of changes will be\n  rejected, and as mentioned experienced TDD practitioners can tell whether\n  tests were written before or after the fact so stick to the rules. If you\n  don't want to practice real TDD don't even bother trying to contribute to the\n  project.\n</p>\n<h2>Documentation</h2>\n<p>\n  Documentation is provide via an Angular application that is published as the\n  GitHub Pages site for the repo. This enables documentation to be included and\n  checked as part of the same Pull Request for changes and additions to be\n  merged.\n</p>\n<p>\n  When submitting a PR for changes to existing code we will expect to see the\n  HTML of the relevant component updated. When submitting a PR for a new feature\n  we will expect to see a new Angular component that full documents the feature\n  added to the demo app and a new item in the side menu, linking to an\n  appropriate route.\n</p>\n<p>We do not expect tests to be written for documentation pages. To create a documentation component use the following Angular CLI command command:</p>\n<pre>ng g c [name] --skipTests=true</pre>\n<p>When pushing code to the repo it is important to understand and remember that the documentation site is automatically published from the <em>/docs</em> folder so before pushing you <em>must remember to run the build script</em> using the following command</p>\n<pre>npm run build</pre>\n<p>This script not only builds the Angular app into the docs folder, it uses the <em>base-href</em> command line argument to set the correct base href value in index.html required for the Angular app to run in GitHub pages.</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ftdemo-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1>Angular Fire Testing</h1>\n<p>\n  The goal of this project is to build a library that makes it easy to provide\n  mock Angular Fire services with minimal setup and configuration and no\n  dependencies on a real or emulated Firebase project.\n</p>\n<p>The library will be published to **@ngextend/fire-testing**</p>\n<p>\n  The project will be managed via Github Project Boards in this repo using a\n  GitFlow style process.\n</p>\n<p>\n  Whilst it is an open source project and absolutely for the community, I am\n  very opinionated and passionate about practicing TDD and producing high\n  quality code, so strict standards and conventions will be enforced and I will\n  retain the final say on whether a pull request is accepted and merged into the\n  **develop** branch.\n</p>\n<p>\n  If you don't want to get involved in development but want to drive the future\n  of the project please take a look at the feature stories\n  [here](https://github.com/ngxtend/fire-testing/issues) and add your own or get\n  involved in the discussions.\n</p>\n<p>\n  If you are interested in contributing as a developer please contact me\n  directly and we can have a discussion. Before you do you should read the\n  [Contributing\n  Guide](https://github.com/ngxtend/fire-testing/wiki/Contributing) consider\n  whether you would be prepared to:\n</p>\n<ul>\n  <li>\n    Practice TDD, not just write tests after the fact, but properly apply TDD\n    rules as originally defined by Kent Beck. Writing a test that justifies the\n    existence of implementation code before you create the implementation\n  </li>\n  <li>\n    Strictly adhere to the coding standards and guidelines as enforced through\n    linting\n  </li>\n  <li>Maintain documentation for any change you make</li>\n  <li>\n    Add to the demo app to provide usage examples for multiple testing\n    frameworks (Jasmine, Moch, Jest etc.)\n  </li>\n  <li>\n    Use an editor that automatically builds and lints code as it is written (VS\n    Code is strongly recommended)\n  </li>\n</ul>\n\n<p>\n  To see the state of the project and monitor progress keep an eye on the\n  [Development Project\n  Board](https://github.com/ngxtend/fire-testing/projects/1)\n</p>\n\n<h2>Justification</h2>\n<p>So why do we need this library?</p>\n<p>\n  I chose Angular as my preferred front end framework a long time ago because\n  testability was built in from the beginning and the framework matches my\n  development philosophy of always applying TDD, SOLID Principles and Clean Code\n  standards. I use Firebase frequently, it is a great platform for web and\n  mobile apps. Having a native Angular module for working with Firebase is great\n  but sadly it wasn't developed with the same testability standards and support\n  as other core Angular modules. For example we have HttpTestingModule,\n  RouterTestingModule and NoopAnimationsModule specifically designed for testing\n  components without having to polute our tests with configuration or setup.\n</p>\n<p>\n  In my experience the biggest obstacle to getting developers to apply TDD is\n  the tedium of repeatedly having to setup and configure the same thing before\n  writing a test.\n</p>\n<p>\n  This is the case for AngularFire it requires a real Firebase app be\n  initialised in tests to avoid errors. In some cases you can get away with\n  injecting a service without an app and using spies to avoid the errors, but I\n  shouldn't have to use spies in this way. I want to be able to write clean\n  readable code in my tests, code that is expressive and a developer friendly\n  form of documentation for fellow developers. Something like this:\n</p>\n\n<pre>\nimport {{ \"{\" }} provideAngularFireAuthMock {{\n    \"}\"\n  }} from '@ngxtend/fire-testing';\n\ndescribe('AuthService', () => {{ \"{\" }}\n    let service: AuthService;\n    let afa: AngularFireAuth;\n    beforeEach(() => {{ \"{\" }}\n        TestBed.configureTestingModule({{ \"{\" }}\n            imports: [AngularFireTestingModule],\n            providers: [AuthService]\n            {{ \"}\" }});\n            service = TestBed.inject(AuthService);\n            afa = TestBed.inject(AngularFireAuth);\n            {{ \"}\" }});\n\n    it('provides state of current user', () => {{ \"{\" }}\n        let actual: any;\n        const expected = {{ \"{\" }} uuid: '12345'{{ \"}\" }};\n\n        service.currentUser$.subscribe(n => actual = n);\n\n        afa.emitUserUpdate(expected);\n\n        expect(actual).toEqual(expected);\n        {{ \"}\" }});\n        {{ \"}\" }});\n</pre>\n<p>\n  In this example AuthService depends on the user$ property of the\n  AngularFireAuth service and exposes it as currentUser$. I want to know that if\n  the user state is updated by Firebase (e.g. when the user signs out) that my\n  AuthService is going to propogate that state change up to any subscribers in\n  the app. My test has very few lines of code, I don't want to bloat it with\n  setting up a spy, I want my testing library to take care of that and let me\n  simply and easily provide the fake with the user state to be emitted with\n  something like the *emitUserUpdate* method. This is what I propose this\n  library should enable and support.\n</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'ngxtend-fire-testing-demo';\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n  <span>Angular Fire Testing</span>\r\n  <span class=\"toolbar-spacer\"></span>\r\n  <a mat-icon-button href=\"https://github.com/ngxtend/fire-testing\">\r\n    <mat-icon class=\"fa-2x\"\r\n      fontSet=\"fab\"\r\n      fontIcon=\"fa-github\"\r\n      aria-hidden=\"false\"\r\n      aria-label=\"Code on github\"\r\n    ></mat-icon>\r\n  </a>\r\n</mat-toolbar>\r\n<mat-sidenav-container>\r\n  <mat-sidenav mode=\"side\" opened=\"true\">\r\n    <mat-nav-list>\r\n      <a mat-list-item routerLink=\"/home\" routerLinkActive=\"active-link\"><mat-icon>home</mat-icon> Home</a>\r\n    </mat-nav-list>\r\n    <mat-nav-list>\r\n      <a mat-list-item routerLink=\"/contributing\" routerLinkActive=\"active-link\"><mat-icon fontSet=\"fas\" fontIcon=\"fa-code-branch\"></mat-icon> Contributing</a>\r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content><router-outlet></router-outlet></mat-sidenav-content>\r\n</mat-sidenav-container>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MaterialModule } from './material/material.module';\nimport { HomeComponent } from './home/home.component';\nimport { ContributingComponent } from './contributing/contributing.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    ContributingComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { NgModule } from '@angular/core';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nconst MODULES = [\n  MatButtonModule,\n  MatIconModule,\n  MatListModule,\n  MatSidenavModule,\n  MatToolbarModule,\n];\n\n@NgModule({\n  declarations: [],\n  imports: MODULES,\n  exports: MODULES,\n})\nexport class MaterialModule {}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ContributingComponent } from './contributing/contributing.component';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'home',\r\n    component: HomeComponent,\r\n  },\r\n  {\r\n    path: 'contributing', component: ContributingComponent\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: '/home',\r\n    pathMatch: 'full',\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}